# Generated from Pp.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\61")
        buf.write("\u0144\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\3\t\3\t\3\n")
        buf.write("\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24")
        buf.write("\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\27\3\27\3\27\3\30")
        buf.write("\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\33\3\34\3\34")
        buf.write("\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3")
        buf.write("\"\3#\3#\3#\3#\3#\3#\3#\3$\3$\3%\3%\3&\3&\3&\3&\3&\3&")
        buf.write("\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3*\3*\3*\3*\3*\3+\5+\u00fe\n+\3+\3+\7+\u0102")
        buf.write("\n+\f+\16+\u0105\13+\3,\5,\u0108\n,\3,\6,\u010b\n,\r,")
        buf.write("\16,\u010c\3-\5-\u0110\n-\3-\6-\u0113\n-\r-\16-\u0114")
        buf.write("\3-\3-\6-\u0119\n-\r-\16-\u011a\5-\u011d\n-\3-\3-\5-\u0121")
        buf.write("\n-\3-\6-\u0124\n-\r-\16-\u0125\5-\u0128\n-\3.\3.\7.\u012c")
        buf.write("\n.\f.\16.\u012f\13.\3.\3.\3/\3/\3/\3/\3/\3/\3/\3/\3/")
        buf.write("\5/\u013c\n/\3\60\6\60\u013f\n\60\r\60\16\60\u0140\3\60")
        buf.write("\3\60\3\u012d\2\61\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n")
        buf.write("\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'")
        buf.write("\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ")
        buf.write("?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61\3\2\7\4\2C\\")
        buf.write("c|\6\2\62;C\\aac|\5\2--//~~\3\2\62;\5\2\13\f\17\17\"\"")
        buf.write("\2\u0151\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2")
        buf.write("\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2")
        buf.write("\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2")
        buf.write("\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3")
        buf.write("\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2")
        buf.write("-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3")
        buf.write("\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2")
        buf.write("?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2")
        buf.write("\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2")
        buf.write("\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2")
        buf.write("\2\2\2]\3\2\2\2\2_\3\2\2\2\3a\3\2\2\2\5c\3\2\2\2\7e\3")
        buf.write("\2\2\2\tj\3\2\2\2\13l\3\2\2\2\rn\3\2\2\2\17p\3\2\2\2\21")
        buf.write("t\3\2\2\2\23v\3\2\2\2\25x\3\2\2\2\27{\3\2\2\2\31\u0082")
        buf.write("\3\2\2\2\33\u0087\3\2\2\2\35\u008d\3\2\2\2\37\u0092\3")
        buf.write("\2\2\2!\u0098\3\2\2\2#\u009d\3\2\2\2%\u00a5\3\2\2\2\'")
        buf.write("\u00ac\3\2\2\2)\u00b0\3\2\2\2+\u00b4\3\2\2\2-\u00b7\3")
        buf.write("\2\2\2/\u00ba\3\2\2\2\61\u00bd\3\2\2\2\63\u00bf\3\2\2")
        buf.write("\2\65\u00c1\3\2\2\2\67\u00c4\3\2\2\29\u00c7\3\2\2\2;\u00c9")
        buf.write("\3\2\2\2=\u00cb\3\2\2\2?\u00cd\3\2\2\2A\u00cf\3\2\2\2")
        buf.write("C\u00d1\3\2\2\2E\u00d3\3\2\2\2G\u00da\3\2\2\2I\u00dc\3")
        buf.write("\2\2\2K\u00de\3\2\2\2M\u00e6\3\2\2\2O\u00ec\3\2\2\2Q\u00f0")
        buf.write("\3\2\2\2S\u00f7\3\2\2\2U\u00fd\3\2\2\2W\u0107\3\2\2\2")
        buf.write("Y\u010f\3\2\2\2[\u0129\3\2\2\2]\u013b\3\2\2\2_\u013e\3")
        buf.write("\2\2\2ab\7}\2\2b\4\3\2\2\2cd\7\177\2\2d\6\3\2\2\2ef\7")
        buf.write("h\2\2fg\7w\2\2gh\7p\2\2hi\7e\2\2i\b\3\2\2\2jk\7*\2\2k")
        buf.write("\n\3\2\2\2lm\7+\2\2m\f\3\2\2\2no\7.\2\2o\16\3\2\2\2pq")
        buf.write("\7n\2\2qr\7g\2\2rs\7v\2\2s\20\3\2\2\2tu\7=\2\2u\22\3\2")
        buf.write("\2\2vw\7?\2\2w\24\3\2\2\2xy\7k\2\2yz\7h\2\2z\26\3\2\2")
        buf.write("\2{|\7g\2\2|}\7n\2\2}~\7u\2\2~\177\7g\2\2\177\u0080\7")
        buf.write("k\2\2\u0080\u0081\7h\2\2\u0081\30\3\2\2\2\u0082\u0083")
        buf.write("\7g\2\2\u0083\u0084\7n\2\2\u0084\u0085\7u\2\2\u0085\u0086")
        buf.write("\7g\2\2\u0086\32\3\2\2\2\u0087\u0088\7y\2\2\u0088\u0089")
        buf.write("\7j\2\2\u0089\u008a\7k\2\2\u008a\u008b\7n\2\2\u008b\u008c")
        buf.write("\7g\2\2\u008c\34\3\2\2\2\u008d\u008e\7t\2\2\u008e\u008f")
        buf.write("\7g\2\2\u008f\u0090\7c\2\2\u0090\u0091\7f\2\2\u0091\36")
        buf.write("\3\2\2\2\u0092\u0093\7y\2\2\u0093\u0094\7t\2\2\u0094\u0095")
        buf.write("\7k\2\2\u0095\u0096\7v\2\2\u0096\u0097\7g\2\2\u0097 \3")
        buf.write("\2\2\2\u0098\u0099\7r\2\2\u0099\u009a\7n\2\2\u009a\u009b")
        buf.write("\7q\2\2\u009b\u009c\7v\2\2\u009c\"\3\2\2\2\u009d\u009e")
        buf.write("\7t\2\2\u009e\u009f\7g\2\2\u009f\u00a0\7c\2\2\u00a0\u00a1")
        buf.write("\7f\2\2\u00a1\u00a2\7e\2\2\u00a2\u00a3\7u\2\2\u00a3\u00a4")
        buf.write("\7x\2\2\u00a4$\3\2\2\2\u00a5\u00a6\7t\2\2\u00a6\u00a7")
        buf.write("\7g\2\2\u00a7\u00a8\7v\2\2\u00a8\u00a9\7w\2\2\u00a9\u00aa")
        buf.write("\7t\2\2\u00aa\u00ab\7p\2\2\u00ab&\3\2\2\2\u00ac\u00ad")
        buf.write("\7p\2\2\u00ad\u00ae\7q\2\2\u00ae\u00af\7v\2\2\u00af(\3")
        buf.write("\2\2\2\u00b0\u00b1\7c\2\2\u00b1\u00b2\7p\2\2\u00b2\u00b3")
        buf.write("\7f\2\2\u00b3*\3\2\2\2\u00b4\u00b5\7q\2\2\u00b5\u00b6")
        buf.write("\7t\2\2\u00b6,\3\2\2\2\u00b7\u00b8\7?\2\2\u00b8\u00b9")
        buf.write("\7?\2\2\u00b9.\3\2\2\2\u00ba\u00bb\7#\2\2\u00bb\u00bc")
        buf.write("\7?\2\2\u00bc\60\3\2\2\2\u00bd\u00be\7@\2\2\u00be\62\3")
        buf.write("\2\2\2\u00bf\u00c0\7>\2\2\u00c0\64\3\2\2\2\u00c1\u00c2")
        buf.write("\7@\2\2\u00c2\u00c3\7?\2\2\u00c3\66\3\2\2\2\u00c4\u00c5")
        buf.write("\7>\2\2\u00c5\u00c6\7?\2\2\u00c68\3\2\2\2\u00c7\u00c8")
        buf.write("\7-\2\2\u00c8:\3\2\2\2\u00c9\u00ca\7/\2\2\u00ca<\3\2\2")
        buf.write("\2\u00cb\u00cc\7,\2\2\u00cc>\3\2\2\2\u00cd\u00ce\7\61")
        buf.write("\2\2\u00ce@\3\2\2\2\u00cf\u00d0\7\'\2\2\u00d0B\3\2\2\2")
        buf.write("\u00d1\u00d2\7`\2\2\u00d2D\3\2\2\2\u00d3\u00d4\7o\2\2")
        buf.write("\u00d4\u00d5\7c\2\2\u00d5\u00d6\7v\2\2\u00d6\u00d7\7t")
        buf.write("\2\2\u00d7\u00d8\7k\2\2\u00d8\u00d9\7z\2\2\u00d9F\3\2")
        buf.write("\2\2\u00da\u00db\7]\2\2\u00dbH\3\2\2\2\u00dc\u00dd\7_")
        buf.write("\2\2\u00ddJ\3\2\2\2\u00de\u00df\7f\2\2\u00df\u00e0\7c")
        buf.write("\2\2\u00e0\u00e1\7v\2\2\u00e1\u00e2\7c\2\2\u00e2\u00e3")
        buf.write("\7u\2\2\u00e3\u00e4\7g\2\2\u00e4\u00e5\7v\2\2\u00e5L\3")
        buf.write("\2\2\2\u00e6\u00e7\7h\2\2\u00e7\u00e8\7n\2\2\u00e8\u00e9")
        buf.write("\7q\2\2\u00e9\u00ea\7c\2\2\u00ea\u00eb\7v\2\2\u00ebN\3")
        buf.write("\2\2\2\u00ec\u00ed\7k\2\2\u00ed\u00ee\7p\2\2\u00ee\u00ef")
        buf.write("\7v\2\2\u00efP\3\2\2\2\u00f0\u00f1\7u\2\2\u00f1\u00f2")
        buf.write("\7v\2\2\u00f2\u00f3\7t\2\2\u00f3\u00f4\7k\2\2\u00f4\u00f5")
        buf.write("\7p\2\2\u00f5\u00f6\7i\2\2\u00f6R\3\2\2\2\u00f7\u00f8")
        buf.write("\7d\2\2\u00f8\u00f9\7q\2\2\u00f9\u00fa\7q\2\2\u00fa\u00fb")
        buf.write("\7n\2\2\u00fbT\3\2\2\2\u00fc\u00fe\7a\2\2\u00fd\u00fc")
        buf.write("\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff")
        buf.write("\u0103\t\2\2\2\u0100\u0102\t\3\2\2\u0101\u0100\3\2\2\2")
        buf.write("\u0102\u0105\3\2\2\2\u0103\u0101\3\2\2\2\u0103\u0104\3")
        buf.write("\2\2\2\u0104V\3\2\2\2\u0105\u0103\3\2\2\2\u0106\u0108")
        buf.write("\t\4\2\2\u0107\u0106\3\2\2\2\u0107\u0108\3\2\2\2\u0108")
        buf.write("\u010a\3\2\2\2\u0109\u010b\t\5\2\2\u010a\u0109\3\2\2\2")
        buf.write("\u010b\u010c\3\2\2\2\u010c\u010a\3\2\2\2\u010c\u010d\3")
        buf.write("\2\2\2\u010dX\3\2\2\2\u010e\u0110\t\4\2\2\u010f\u010e")
        buf.write("\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u0112\3\2\2\2\u0111")
        buf.write("\u0113\t\5\2\2\u0112\u0111\3\2\2\2\u0113\u0114\3\2\2\2")
        buf.write("\u0114\u0112\3\2\2\2\u0114\u0115\3\2\2\2\u0115\u0116\3")
        buf.write("\2\2\2\u0116\u011c\7\60\2\2\u0117\u0119\t\5\2\2\u0118")
        buf.write("\u0117\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u0118\3\2\2\2")
        buf.write("\u011a\u011b\3\2\2\2\u011b\u011d\3\2\2\2\u011c\u0118\3")
        buf.write("\2\2\2\u011c\u011d\3\2\2\2\u011d\u0127\3\2\2\2\u011e\u0120")
        buf.write("\7G\2\2\u011f\u0121\t\4\2\2\u0120\u011f\3\2\2\2\u0120")
        buf.write("\u0121\3\2\2\2\u0121\u0123\3\2\2\2\u0122\u0124\t\5\2\2")
        buf.write("\u0123\u0122\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u0123\3")
        buf.write("\2\2\2\u0125\u0126\3\2\2\2\u0126\u0128\3\2\2\2\u0127\u011e")
        buf.write("\3\2\2\2\u0127\u0128\3\2\2\2\u0128Z\3\2\2\2\u0129\u012d")
        buf.write("\7$\2\2\u012a\u012c\13\2\2\2\u012b\u012a\3\2\2\2\u012c")
        buf.write("\u012f\3\2\2\2\u012d\u012e\3\2\2\2\u012d\u012b\3\2\2\2")
        buf.write("\u012e\u0130\3\2\2\2\u012f\u012d\3\2\2\2\u0130\u0131\7")
        buf.write("$\2\2\u0131\\\3\2\2\2\u0132\u0133\7v\2\2\u0133\u0134\7")
        buf.write("t\2\2\u0134\u0135\7w\2\2\u0135\u013c\7g\2\2\u0136\u0137")
        buf.write("\7h\2\2\u0137\u0138\7c\2\2\u0138\u0139\7n\2\2\u0139\u013a")
        buf.write("\7u\2\2\u013a\u013c\7g\2\2\u013b\u0132\3\2\2\2\u013b\u0136")
        buf.write("\3\2\2\2\u013c^\3\2\2\2\u013d\u013f\t\6\2\2\u013e\u013d")
        buf.write("\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u013e\3\2\2\2\u0140")
        buf.write("\u0141\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0143\b\60\2")
        buf.write("\2\u0143`\3\2\2\2\21\2\u00fd\u0103\u0107\u010c\u010f\u0114")
        buf.write("\u011a\u011c\u0120\u0125\u0127\u012d\u013b\u0140\3\b\2")
        buf.write("\2")
        return buf.getvalue()


class PpLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    ID = 42
    INT_NUMBER = 43
    FLOAT_NUMBER = 44
    STRING_LITERAL = 45
    BOOL_LITERAL = 46
    WS = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'func'", "'('", "')'", "','", "'let'", "';'", 
            "'='", "'if'", "'elseif'", "'else'", "'while'", "'read'", "'write'", 
            "'plot'", "'readcsv'", "'return'", "'not'", "'and'", "'or'", 
            "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", "'-'", 
            "'*'", "'/'", "'%'", "'^'", "'matrix'", "'['", "']'", "'dataset'", 
            "'float'", "'int'", "'string'", "'bool'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT_NUMBER", "FLOAT_NUMBER", "STRING_LITERAL", "BOOL_LITERAL", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "ID", "INT_NUMBER", "FLOAT_NUMBER", 
                  "STRING_LITERAL", "BOOL_LITERAL", "WS" ]

    grammarFileName = "Pp.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


